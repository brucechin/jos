Question 1. Compare kern/mpentry.S side by side with boot/boot.S.
Bearing in mind that kern/mpentry.S is compiled and linked to run
above KERNBASE just like everything else in the kernel, what is
the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S
but not in boot/boot.S? In other words, what could go wrong if it
were omitted in kern/mpentry.S?
Hint: recall the differences between the link address and the
load address that we have discussed in Lab 1.

kern/mpentry.S is compiled and linked to run above KERNBASE. However,
just after booted, the AP runs in the real mode. So we need MPBOOTPHYS
to convert the address. boot/boot.S is compiled and linked to run in
the real mode, so it doesn't need it. Without MPBOOTPHYS, kern/mpentry.S
will access wrong address.

Question 2. It seems that using the big kernel lock guarantees that only
one CPU can run the kernel code at a time. Why do we still need separate
kernel stacks for each CPU? Describe a scenario in which using a shared
kernel stack will go wrong, even with the protection of the big kernel lock.

Supposing that CPU0 is running the kernel code and then an interrupt happens
on CPU1. Because the CPU has no idea about the lock, it will push the registers
onto the shared stack immediately and corrupt the stack.

Question 3. In your implementation of env_run() you should have called lcr3().
Before and after the call to lcr3(), your code makes references (at least it
should) to the variable e, the argument to env_run. Upon loading the %cr3
register, the addressing context used by the MMU is instantly changed.
But a virtual address (namely e) has meaning relative to a given address
context--the address context specifies the physical address to which
the virtual address maps. Why can the pointer e be dereferenced both
before and after the addressing switch?

Because the VA space of all page table in JOS is identical above UTOP
(except at UVPT). Therefore, the addressing switch does not affect e.

Challenge: see the document
